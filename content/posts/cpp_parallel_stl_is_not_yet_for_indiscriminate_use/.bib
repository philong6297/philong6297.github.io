@manual{concore,
  author       = {Lucian Radu Teodorescu},
  title        = {{Concore library}},
  howpublished = {ver. 0.5},
  year         = {2021 [Online].},
  url          = {https://github.com/lucteo/concore}
}

@misc{Filipek17a,
  author       = {Bartlomiej Filipek},
  title        = {{C++17 in details: Parallel Algorithms}},
  month        = {Aug. 21,},
  year         = {2017 [Online]},
  howpublished = {C++ Stories, blog},
  url          = {https://www.cppstories.com/2017/08/cpp17-details-parallel/}
}

@misc{Filipek17b,
  author       = {Bartlomiej Filipek},
  title        = {{The Amazing Performance of C++17 Parallel Algorithms, is it Possible?}},
  month        = {Nov. 12,},
  year         = {2018 [Online]},
  howpublished = {C++ Stories, blog},
  url          = {https://www.cppstories.com/2018/11/parallel-alg-perf/}
}

@misc{Henney17,
  title        = {{Thinking Outside the Synchronisation Quadrant}},
  author       = {Kevlin Henney},
  howpublished = {ACCU 2017 conference},
  year         = {2017},
  url          = {https://www.youtube.com/watch?v=UJrmee7o68A}
}

@misc{Lelbach16,
  title        = {{C++ Parallel Algorithms and Beyond}},
  author       = {Bryce Adelstein Lelbach},
  howpublished = {CppCon 2016 conference},
  year         = {2016},
  url          = {https://www.youtube.com/watch?v=UJrmee7o68A}
}

@misc{ONeal18,
  author       = {Billy O'Neal},
  title        = {{Using C++17 Parallel Algorithms for Better Performance}},
  month        = {Sep. 12,},
  year         = {2018 [Online]},
  howpublished = {C++ Team Blog, blog},
  url          = {https://devblogs.microsoft.com/cppblog/using-c17-parallel-algorithms-for-better-performance/}
}

@misc{Parent16,
  title        = {{Better Code: Concurrency}},
  author       = {Sean Parent},
  howpublished = {code::dive 2016 conference},
  year         = {2016},
  url          = {https://www.youtube.com/watch?v=QIHy8pXbneI}
}

@misc{Pike13,
  title        = {{Concurrency Is Not Parallelism}},
  author       = {Rob Pike},
  howpublished = {Heroku's Waza conference},
  year         = {2012},
  url          = {https://go.dev/talks/2012/waza.slide#2}
}

@misc{Rodgers18,
  title        = {{Bringing C++ 17 Parallel Algorithms to a Standard Library Near You}},
  author       = {Thomas Rodgers},
  howpublished = {CppCon 2018 conference},
  year         = {2018},
  url          = {https://www.youtube.com/watch?v=-KT8gaojHUU}
}

@inproceedings{Sutter05,
  title  = {The Free Lunch Is Over A Fundamental Turn Toward Concurrency in Software},
  author = {Herb Sutter},
  year   = {2005}
}

@article{Teodorescu20a,
  author  = {Lucian Radu Teodorescu},
  title   = {{Refocusing Amdahl's Law}},
  journal = {Overload},
  volume  = {157},
  year    = {2020 [Online]},
  pages   = {5--10},
  month   = Jun,
  url     = {https://accu.org/journals/overload/28/157/overload157.pdf#page=7}
}

@article{Teodorescu20b,
  author  = {Lucian Radu Teodorescu},
  title   = {{The Global Lockdown of Locks}},
  journal = {Overload},
  volume  = {158},
  year    = {2020 [Online]},
  pages   = {4--9},
  month   = Aug,
  url     = {https://accu.org/journals/overload/28/158/overload158.pdf#page=6}
}

@article{Teodorescu20c,
  author  = {Lucian Radu Teodorescu},
  title   = {{Concurrency Design Patterns}},
  journal = {Overload},
  volume  = {159},
  year    = {2020 [Online]},
  pages   = {12--18},
  month   = Oct,
  url     = {https://accu.org/journals/overload/28/159/overload159.pdf#page=14}
}

@techreport{iso-cpp-20,
  type         = {International Standard},
  howpublished = {{ISO/IEC 14882:2020}},
  month        = 12,
  year         = 2020,
  title        = {{Programming languages - C++}},
  pagetotal    = 1853,
  institution  = {International Organization for Standardization},
  edition      = 6,
  url          = {https://www.iso.org/standard/79358.html},
  note         = {Accessed: 2022-12-31}
}

@inproceedings{Amdahl1967,
  author    = {Amdahl, Gene M.},
  title     = {Validity of the Single Processor Approach to Achieving Large Scale Computing Capabilities},
  year      = {1967},
  isbn      = {9781450378956},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/1465482.1465560},
  doi       = {10.1145/1465482.1465560},
  abstract  = {For over a decade prophets have voiced the contention that the organization of a single computer has reached its limits and that truly significant advances can be made only by interconnection of a multiplicity of computers in such a manner as to permit cooperative solution. Variously the proper direction has been pointed out as general purpose computers with a generalized interconnection of memories, or as specialized computers with geometrically related memory interconnections and controlled by one or more instruction streams.},
  booktitle = {Proceedings of the April 18-20, 1967, Spring Joint Computer Conference},
  pages     = {483--485},
  numpages  = {3},
  location  = {Atlantic City, New Jersey},
  series    = {AFIPS '67 (Spring)}
}

@article{David1985,
  author     = {Rodgers, David P.},
  title      = {Improvements in Multiprocessor System Design},
  year       = {1985},
  issue_date = {June 1985},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {13},
  number     = {3},
  issn       = {0163-5964},
  url        = {https://doi.org/10.1145/327070.327215},
  doi        = {10.1145/327070.327215},
  journal    = {SIGARCH Comput. Archit. News},
  month      = {jun},
  pages      = {225--231},
  numpages   = {7}
}

@incollection{Martin2011,
  title     = {{Chapter 7 - Performance}},
  editor    = {Martin Reddy},
  booktitle = {{API Design for C++}},
  publisher = {Morgan Kaufmann},
  address   = {Boston},
  pages     = {209-240},
  year      = {2011},
  isbn      = {978-0-12-385003-4},
  doi       = {https://doi.org/10.1016/B978-0-12-385003-4.00007-5},
  url       = {https://www.sciencedirect.com/science/article/pii/B9780123850034000075},
  author    = {Martin Reddy},
  abstract  = {Publisher Summary
               This chapter focuses on how certain API design decisions can impact performance, and therefore how one can optimize the performance of the interface. It also describes that some APIs are performance critical and must be called many times per second, whereas other APIs are used infrequently and their speed is of less concern. The implementation of API design may not need to be high performance, but the interface should still be as optimal as possible so that it is not actively undermining performance. Good designs normally correspond with good performance. The API should continue to provide a clean and logical representation of the problem domain even after optimizing its implementation. There are several components to API performance which are compile-time speed, run-time speed, run-time memory overhead, library size, and startup time.}
}

@misc{IntelOneTBB,
  organization = {Intel Corporation},
  title        = {{oneAPI Threading Building Blocks (oneTBB)}},
  year         = {2023 [Online]},
  month        = {Accessed Feb},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {https://github.com/oneapi-src/oneTBB/blob/master/include/oneapi/tbb/parallel_sort.h},
  version      = {4eec89fe7a3e23e5b3f291e844e841ee08fdef96}
}

@misc{Jorg19,
  url          = {https://www.youtube.com/watch?v=TyiiNVA1syk},
  author       = {Jorg Brown},
  howpublished = {CppCon 2019 conference},
  year         = {2019},
  title        = {{Reducing Template Compilation Overhead, Using C++11, 14, 17, and 20}}
}
