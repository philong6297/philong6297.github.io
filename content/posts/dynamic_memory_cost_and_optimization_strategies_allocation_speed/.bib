@techreport{iso-c-17,
  type         = {International Standard},
  howpublished = {{ISO/IEC 9899:2018}},
  month        = 6,
  year         = 2018,
  title        = {{Information technology - Programming languages - C}},
  pagetotal    = 520,
  institution  = {International Organization for Standardization},
  edition      = 4,
  url          = {https://www.iso.org/standard/74528.html}
}

@techreport{iec-c-17,
  type         = {International Standard},
  howpublished = {{ISO/IEC 9899:2018}},
  month        = 6,
  year         = 2018,
  title        = {{Information technology - Programming languages - C}},
  pagetotal    = 520,
  institution  = {International Electrotechnical Commission},
  edition      = 4,
  url          = {https://webstore.iec.ch/publication/63478}
}

@misc{mutex-lock-cost-benchmark,
  author       = {Carlo Wood},
  url          = {https://stackoverflow.com/a/49712993},
  title        = {How efficient is locking and unlocked mutex? What is the cost of a mutex?},
  year         = {2019 [Online]},
  note         = {Accessed: 2022-12-31},
  howpublished = {stackoverflow}
}

@misc{mutex-lock-cost-explain,
  author       = {Dummy00001},
  url          = {https://stackoverflow.com/a/3652428},
  title        = {{How efficient is locking and unlocked mutex? What is the cost of a mutex?}},
  year         = {2010 [Online]},
  note         = {Accessed: 2022-12-31},
  howpublished = {stackoverflow}
}

@article{premature-optimization,
  author     = {Knuth, Donald E.},
  title      = {Structured Programming with Go to Statements},
  year       = {1974},
  issue_date = {Dec. 1974},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {6},
  number     = {4},
  issn       = {0360-0300},
  url        = {https://doi.org/10.1145/356635.356640},
  doi        = {10.1145/356635.356640},
  journal    = {ACM Comput. Surv.},
  month      = {dec},
  pages      = {261-301},
  numpages   = {41}
}

@misc{ms-proxy,
  author       = {Mingxin Wang},
  title        = {proxy: Runtime Polymorphism Made Easier Than Ever},
  howpublished = {Microsoft},
  month        = {Aug. 15,},
  year         = {2022 [Online]},
  url          = {https://devblogs.microsoft.com/cppblog/proxy-runtime-polymorphism-made-easier-than-ever/}
}

@techreport{iso-cpp-20,
  type         = {International Standard},
  howpublished = {{ISO/IEC 14882:2020}},
  month        = 12,
  year         = 2020,
  title        = {{Programming languages - C++}},
  pagetotal    = 1853,
  institution  = {International Organization for Standardization},
  edition      = 6,
  url          = {https://www.iso.org/standard/79358.html},
  note         = {Accessed: 2022-12-31}
}

@techreport{iec-cpp-20,
  type         = {International Standard},
  howpublished = {{ISO/IEC 14882:2020}},
  month        = 12,
  year         = 2020,
  title        = {{Programming languages - C++}},
  pagetotal    = 1853,
  institution  = {International Electrotechnical Commission},
  edition      = 6,
  url          = {https://webstore.iec.ch/publication/68285},
  note         = {Accessed: 2022-12-31}
}

@article{region-based-memory-management,
  title    = {Region-Based Memory Management},
  journal  = {Information and Computation},
  volume   = {132},
  number   = {2},
  pages    = {109-176},
  year     = {1997},
  issn     = {0890-5401},
  doi      = {https://doi.org/10.1006/inco.1996.2613},
  url      = {https://www.sciencedirect.com/science/article/pii/S0890540196926139},
  author   = {Mads Tofte and Jean-Pierre Talpin},
  abstract = {This paper describes a memory management discipline for programs that perform dynamic memory allocation and de-allocation. At runtime, all values are put intoregions. The store consists of a stack of regions. All points of region allocation and de-allocation are inferred automatically, using a type and effect based program analysis. The scheme does not assume the presence of a garbage collector. The scheme was first presented in 1994 (M. Tofte and J.-P. Talpin,in“Proceedings of the 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages,” pp. 188-201); subsequently, it has been tested in The ML Kit with Regions, a region-based, garbage-collection free implementation of the Standard ML Core language, which includes recursive datatypes, higher-order functions and updatable references L. Birkedal, M. Tofte, and M. Vejlstrup, (1996),in“Proceedings of the 23 rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages,” pp. 171-183. This paper defines a region-based dynamic semantics for a skeletal programming language extracted from Standard ML. We present the inference system which specifies where regions can be allocated and de-allocated and a detailed proof that the system is sound with respect to a standard semantics. We conclude by giving some advice on how to write programs that run well on a stack of regions, based on practical experience with the ML Kit.}
}

@misc{libcpp-implementation,
  author       = {Joel Laity},
  title        = {{libc++'s implementation of std::string}},
  month        = {Jan. 31,},
  year         = {2020 [Online]},
  howpublished = {joellaity, blog},
  url          = {https://joellaity.com/2020/01/31/string.html}
}

@standard{misra-2004,
  added-at     = {2010-01-10T12:29:51.000+0100},
  author       = {{MIRA Ltd}},
  biburl       = {https://www.bibsonomy.org/bibtex/24af84f2c08b4012aef91dc1c6440ff5e/sjbutler},
  institution  = {Motor Industry Software Reliability Association},
  interhash    = {6574ea339cdd190f20ece212bdef42ad},
  intrahash    = {4af84f2c08b4012aef91dc1c6440ff5e},
  keywords     = {source standard C code},
  month        = Oct,
  organization = {MIRA},
  timestamp    = {2010-01-10T12:29:52.000+0100},
  title        = {{MISRA-C}:2004 {G}uidelines for the use of the {C} language in Critical Systems},
  url          = {www.misra.org.uk},
  year         = 2004
}

@book{misra-c-2012,
  title     = {{MISRA C:2012: Guidelines for the Use of the C Language in Critical Systems}},
  author    = {{Motor Industry Software Reliability Association and Motor Industry Software Reliability Association Staff and HORIBA MIRA Ltd and HORIBA MIRA Ltd. Staff}},
  isbn      = {9781906400217},
  url       = {https://books.google.com.vn/books?id=daApxQEACAAJ},
  year      = {2019},
  publisher = {Unknown Publisher}
}

@book{misra-c-2004,
  title     = {{MISRA-C:2004: Guidelines for the Use of the C Language in Critical Systems}},
  author    = {{Motor Industry Software Reliability Association}},
  isbn      = {9780952415626},
  url       = {https://books.google.com.vn/books?id=j6oXAAAACAAJ},
  year      = {2004},
  publisher = {MIRA}
}

@book{misra-cpp-2008,
  title     = {{MISRA-C++:2008: Guidelines for the Use of the C++ Language in Critical Systems}},
  author    = {{Motor Industry Software Reliability Association}},
  isbn      = {9781906400033},
  url       = {https://books.google.com.vn/books?id=bNUqPQAACAAJ},
  year      = {2008},
  publisher = {MIRA Limited}
}

@misc{it-hare-testing-allocators,
  author       = {{“No Bugs” Hare}},
  title        = {{Testing Memory Allocators: ptmalloc2 vs tcmalloc vs hoard vs jemalloc While Trying to Simulate Real-World Loads}},
  month        = {Jul. 04,},
  year         = {2018 [Online]},
  howpublished = {IT Hare on Soft.ware, blog},
  url          = {http://ithare.com/testing-memory-allocators-ptmalloc2-tcmalloc-hoard-jemalloc-while-trying-to-simulate-real-world-loads/}
}
