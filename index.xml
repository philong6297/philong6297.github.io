<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LongLP</title><link>https://philong6297.github.io/</link><description>Recent content on LongLP</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>test-cpr</copyright><lastBuildDate>Sat, 31 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://philong6297.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Dymanic Memory Cost and Optimization Strategies: Allocation Speed</title><link>https://philong6297.github.io/posts/dynamic_memory_cost_and_optimization_strategies_allocation_speed/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://philong6297.github.io/posts/dynamic_memory_cost_and_optimization_strategies_allocation_speed/</guid><description>1. Introduction 2. Drawbacks of malloc and free design 2.1. Memory fragmentation 2.2. Thread Synchronization 3. Program slowness caused by allocators 4. Optimization Strategies 4.1. Contiguous containers of pointers 4.2. Custom STL Allocator 4.2.1. STL Allocators - Per-Type Allocator 4.2.1.1. Design Overview 4.2.1.2. Example of customizing STL allocator 4.2.2. Per-Instance Allocator 4.2.3. Tuning the custom allocator 4.3. Memory chunk caching for producer-consumer 4.4. Small Size Optimizations 4.5. Fighting memory fragmentation 5.</description></item><item><title>About inlining</title><link>https://philong6297.github.io/posts/about_inlining/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate><guid>https://philong6297.github.io/posts/about_inlining/</guid><description>Introduction Link to heading For me, every time I encounter the inline keyword in codebase and document myself about it, I still end up with the same conclusions:
Inlining is often misused in development, which results in counter-productive and risky situations.
I will try to summarize all the aspects which I believe we need to remember about inlining, giving pros, cons and situations when it can be used and when we should avoid.</description></item></channel></rss>